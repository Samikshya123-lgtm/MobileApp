import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.0/firebase-app.js";
import {
  getDatabase, ref, set, push, update, remove, onValue
} from "https://www.gstatic.com/firebasejs/11.6.0/firebase-database.js";

const firebaseConfig = {
    apiKey: "AIzaSyCT_jzgUyLr8_TyU6Rf76O1gUZaRL91Lu8",
    authDomain: "fir-tutorial-80d3e.firebaseapp.com",
    projectId: "fir-tutorial-80d3e",
    storageBucket: "fir-tutorial-80d3e.firebasestorage.app",
    messagingSenderId: "412514690093",
    appId: "1:412514690093:web:265a9e9d9ba2b250c804a4"
  };

// Initialize Firebase app with the provided configuration
const app = initializeApp(firebaseConfig);
    const db = getDatabase(app);

// Create a reference to the 'users' node in the database
const userRef = ref(db, 'users');

// Get references to DOM elements
const form = document.getElementById('userForm');
const nameInput = document.getElementById('name');
const emailInput = document.getElementById('email');
const userIdInput = document.getElementById('userId');
const userTableBody = document.getElementById('userTableBody');

// Handle form submission for adding/updating a user. The 'submit' event fires when the user submits the form (e.g., by clicking the "Save" button).
form.addEventListener('submit', function (e) {
  e.preventDefault(); // Prevent the default form submission

// This prevents the browser's default form behavior, which is to reload the page and send the form data to the server.
// Since you're handling form submission using JavaScript (e.g., storing data in Firebase), you don’t want the page to reload — so you stop that default behavior here.



  // Get input values
  const name = nameInput.value;
  const email = emailInput.value;
  //const userId = userIdInput.value;

  if (userId) {
    // If userId is present, update the existing user's data
    update(ref(db, 'users/' + userId), { name, email });
  } else {
    // If userId is not present, create a new user entry
    const newUserRef = push(userRef); // Generate a new unique key
    set(newUserRef, { name, email }); // Save the new user data
  }

  // Reset the form fields after submission
  form.reset();
});

// onValue is a listener function that continuously listens for changes at a particular location (node) in the users table and update the HTML table
onValue(userRef, (snapshot) => {
  userTableBody.innerHTML = ''; // Clear the table before rendering

  snapshot.forEach((child) => {
    const data = child.val(); // Get user data
    const tr = document.createElement('tr'); // Create a new table row

    // Populate the table row with user data and action buttons
    // Child.key gives you the unique identifier of that particular record (or node) within the database. This unique key is generated by push.
    tr.innerHTML = `
      <td>${data.name}</td>
      <td>${data.email}</td>
      <td class="text-center">
        <button class="btn btn-warning btn-sm" onclick="editUser('${child.key}', '${data.name}', '${data.email}')">Edit</button>
        <button class="btn btn-danger btn-sm" onclick="deleteUser('${child.key}')">Delete</button>
      </td>
    `;
    userTableBody.appendChild(tr); // Append the row to the table body
  });
});

// Function to populate the form with existing user data for editing
window.editUser = function (id, name, email) {
  nameInput.value = name;
  emailInput.value = email;
  userIdInput.value = id; // Set hidden input to keep track of user ID
};

// Function to delete a user from the database
window.deleteUser = function (id) {
  // Ask for confirmation before deleting
  if (confirm("Are you sure you want to delete this user?")) {
    remove(ref(db, 'users/' + id)); // Remove the user from Firebase
  }
};

  
